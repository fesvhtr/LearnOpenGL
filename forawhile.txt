while (0)
{//!glfwWindowShouldClose(window)
        float currentFrame = static_cast<float>(glfwGetTime());
        deltaTime = currentFrame - lastFrame;
        lastFrame = currentFrame;
        // input
        processInput(window);
        // render
        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        //clear depth each render -else remain last z
        //clear color buffer
        //clear stencil buffer
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
        //avoid depth buffer clear
        //glDepthMask(GL_FALSE);
        //init view and projection matrix
        glm::mat4 view = glm::mat4(1.0f);
        glm::mat4 projection = glm::mat4(1.0f);
        //get view and projection which not change
        view = camera.GetViewMatrix();
        projection = glm::perspective(glm::radians(camera.Zoom), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);
        //render skybox first always---------------------------------------
        glStencilMask(0x00);
        glDepthMask(GL_FALSE);
        glm::mat4 sky_view = glm::mat4(glm::mat3(view));
        sky_shader.use();
        sky_shader.setMat4("sky_view",sky_view);
        sky_shader.setMat4("sky_projection",projection);
        glBindVertexArray(skyVAO);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_CUBE_MAP, cubemapTexture);
        glDrawArrays(GL_TRIANGLES, 0, 36);
        glBindVertexArray(0);
        glDepthMask(GL_TRUE);
        //render light cube---------------------------------------------
        glStencilMask(0x00);
        drawLightCube(lt_shader,lightVAO);
        //render cubes--------------------------------------------------------
        for (unsigned int i = 0; i < 10; i++)
        {
            ourShader.use();
            //set cube shader
            ourShader.setVec3("viewPos",camera.Position);
            ourShader.setVec3("light.position",lightPos);
            ourShader.setVec3("light.ambient", 0.3f, 0.3f, 0.3f);
            ourShader.setVec3("light.diffuse", 0.6f, 0.6f, 0.6f);
            ourShader.setVec3("light.specular", 1.0f, 1.0f, 1.0f);
            //set textures
            ourShader.setVec3("material_zzface.specular", 0.5f, 0.5f, 0.5f);
            ourShader.setFloat("material_zzface.shininess", 64.0f);
            ourShader.setVec3("material_container.specular", 0.5f, 0.5f, 0.5f);
            ourShader.setFloat("material_container.shininess", 64.0f);
            //1st. render pass, draw objects as normal, writing to the stencil buffer
            //set all stencil 1
            glStencilFunc(GL_ALWAYS, 1, 0xFF);
            glStencilMask(0xFF);
            //texture active and bind
            glActiveTexture(GL_TEXTURE0);
            glBindTexture(GL_TEXTURE_2D, diffuse_map1);
            glActiveTexture(GL_TEXTURE1);
            glBindTexture(GL_TEXTURE_2D, diffuse_map2);
            // init model and trans each render
            glm::mat4 model= glm::mat4(1.0f);
            glm::mat4 trans = glm::mat4(1.0f);
            //calculate model
            model = glm::translate(model, cubePositions[i]);
            float angle = 20.0f * (i+1);
            model = glm::rotate(model, (float)glfwGetTime() * glm::radians(angle), glm::vec3(0.5f, 1.0f, 0.0f));
            //model = glm::rotate(model,  glm::radians(angle), glm::vec3(0.5f, 1.0f, 0.0f));
            trans = projection * view * model;
            glBindBuffer(GL_UNIFORM_BUFFER, UBO);
            glBufferSubData(GL_UNIFORM_BUFFER, 0, sizeof(glm::mat4), glm::value_ptr(trans));
            glBufferSubData(GL_UNIFORM_BUFFER, sizeof(glm::mat4), sizeof(glm::mat4), glm::value_ptr(model));
            glBindBuffer(GL_UNIFORM_BUFFER, 0);
//            ourShader.setMat4("model",model);
//            ourShader.setMat4("trans", trans);
            glBindVertexArray(VAO);
            glDrawArrays(GL_TRIANGLES, 0, 36);
            //2st
            glStencilFunc(GL_NOTEQUAL, 1, 0xFF);
            glStencilMask(0x00);
            //glDisable(GL_DEPTH_TEST);
            edge_shader.use();
            model= glm::mat4(1.0f);
            trans = glm::mat4(1.0f);
            //calculate model
            model = glm::translate(model, cubePositions[i]);
            model = glm::rotate(model, (float)glfwGetTime() * glm::radians(angle), glm::vec3(0.5f, 1.0f, 0.0f));
            //model = glm::rotate(model, glm::radians(angle), glm::vec3(0.5f, 1.0f, 0.0f));
            model = glm::scale(model,glm::vec3(1.1f,1.1f,1.1f));
            trans = projection * view * model;
            edge_shader.setMat4("model",model);
            edge_shader.setMat4("trans", trans);
            glBindVertexArray(VAO);
            glDrawArrays(GL_TRIANGLES, 0, 36);
            glStencilMask(0xFF);
            //glEnable(GL_DEPTH_TEST);
            //clear stencil buffer every time - so every cube has own edge
            //else the next cube's stencil value equals 1 - past edge be covered
            glClear(GL_STENCIL_BUFFER_BIT);
        }
        //render window----------------------------------------------------
        glStencilFunc(GL_ALWAYS, 1, 0xFF);
        glStencilMask(0xFF);
        drawWindow(window_shader,windowVAO,window_map);
        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
        glfwSwapBuffers(window);
        glfwPollEvents();
    }